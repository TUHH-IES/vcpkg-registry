diff --git a/CMakeLists.txt b/CMakeLists.txt
index 555bbb8e..2a2c67ea 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,3 +1,6 @@
+set(CMAKE_TOOLCHAIN_FILE "${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
+        CACHE STRING "Vcpkg toolchain file")
+
 cmake_minimum_required(VERSION 3.16)
 Project(ChimeraTK-DeviceAccess)
 
@@ -11,13 +14,13 @@ include(cmake/set_version_numbers.cmake)
 # C++ compiler flags needed to compile this project and against this project
 # The -D_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR flag is only needed for
 # libxml++ 2.6.
-set(${PROJECT_NAME}_CXX_FLAGS "${${PROJECT_NAME}_CXX_FLAGS} -D_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR")
+#set(${PROJECT_NAME}_CXX_FLAGS "${${PROJECT_NAME}_CXX_FLAGS} -D_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR")
 
-include(cmake/set_default_build_to_release.cmake)
+#include(cmake/set_default_build_to_release.cmake)
 
 # modifies ${PROJECT_NAME}_CXX_FLAGS
-include(cmake/set_default_flags.cmake)
-include(cmake/enable_code_coverage_report.cmake)
+#include(cmake/set_default_flags.cmake)
+#include(cmake/enable_code_coverage_report.cmake)
 
 include(cmake/CheckFileOffsetBits.cmake)
 CHECK_FILE_OFFSET_BITS()
@@ -33,10 +36,11 @@ endif(SUPPRESS_AUTO_DOC_BUILD)
 
 FIND_PACKAGE(Boost COMPONENTS thread system chrono filesystem REQUIRED)
 FIND_PACKAGE(ChimeraTK-cppext 01.05 REQUIRED)
-FIND_PACKAGE(exprtk 01.04 REQUIRED)
+find_path(EXPRTK_INCLUDE_DIRS "exprtk.hpp")
+#find_package(libxmlpp REQUIRED)
 
 FIND_PACKAGE(PkgConfig REQUIRED)
-set(LIBXML++_VERSION "libxml++-2.6")
+set(LIBXML++_VERSION "libxml++-5.0")
 PKG_CHECK_MODULES(LibXML++ REQUIRED IMPORTED_TARGET ${LIBXML++_VERSION})
 
 # The PCIe backend can only be built on Linux, so we define a variable here that
@@ -102,15 +106,15 @@ endif()
 add_library(${PROJECT_NAME} SHARED ${SOURCE})
 
 # we need the compile options as array to tell cmake they should be exported
-include(cmake/format_options.cmake)
-formatOptionsAsArray(projectCxxFlags ${${PROJECT_NAME}_CXX_FLAGS})
-target_compile_options(${PROJECT_NAME} PUBLIC ${projectCxxFlags})
+#include(cmake/format_options.cmake)
+#formatOptionsAsArray(projectCxxFlags ${${PROJECT_NAME}_CXX_FLAGS})
+#target_compile_options(${PROJECT_NAME} PUBLIC ${projectCxxFlags})
 
 # exported includes are all under ${CMAKE_INSTALL_PREFIX}/include
 target_include_directories(${PROJECT_NAME} INTERFACE "$<INSTALL_INTERFACE:include>")
 set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${${PROJECT_NAME}_FULL_LIBRARY_VERSION} SOVERSION ${${PROJECT_NAME}_SOVERSION})
 target_link_libraries(${PROJECT_NAME}
-  PRIVATE ${CMAKE_DL_LIBS} PkgConfig::LibXML++ ChimeraTK::exprtk
+  PRIVATE ${CMAKE_DL_LIBS} PkgConfig::LibXML++
 
   # we set this public because of Backend libs using shm_open (e.g. test code)
   PUBLIC ${RT_LIBRARIES}
@@ -133,15 +137,33 @@ list(APPEND ${PROJECT_NAME}_PUBLIC_DEPENDENCIES "Boost COMPONENTS system thread
 list(APPEND ${PROJECT_NAME}_PUBLIC_DEPENDENCIES "ChimeraTK-cppext")
 
 # Install the library and the executables
-install(TARGETS ${PROJECT_NAME}
-  EXPORT ${PROJECT_NAME}Targets
-  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
+#install(TARGETS ${PROJECT_NAME}
+#  EXPORT ${PROJECT_NAME}Targets
+#  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
+
+include(CMakePackageConfigHelpers)
+configure_package_config_file(cmake/config.cmake.in
+        ${CMAKE_CURRENT_BINARY_DIR}/chimeratk-deviceaccess-config.cmake
+        INSTALL_DESTINATION ${CMAKE_INSTALL_DATADIR}/chimeratk-deviceaccess
+        NO_SET_AND_CHECK_MACRO)
+write_basic_package_version_file(
+        ${CMAKE_CURRENT_BINARY_DIR}/chimeratk-deviceaccess-config-version.cmake
+        VERSION ${${PROJECT_NAME}_VERSION}
+        COMPATIBILITY SameMajorVersion)
+install(FILES
+        ${CMAKE_CURRENT_BINARY_DIR}/chimeratk-deviceaccess-config.cmake
+        ${CMAKE_CURRENT_BINARY_DIR}/chimeratk-deviceaccess-config-version.cmake
+        DESTINATION ${CMAKE_INSTALL_DATADIR}/chimeratk-deviceaccess)
+install(TARGETS ChimeraTK-DeviceAccess EXPORT chimeratk-deviceaccess-targets)
+install(EXPORT chimeratk-deviceaccess-targets
+        NAMESPACE ChimeraTK::
+        DESTINATION ${CMAKE_INSTALL_DATADIR}/chimeratk-deviceaccess)
 
 # we support our cmake EXPORTS as imported targets
-set(PROVIDES_EXPORTED_TARGETS 1)
-include(${CMAKE_SOURCE_DIR}/cmake/create_cmake_config_files.cmake)
+#set(PROVIDES_EXPORTED_TARGETS 1)
+#include(${CMAKE_SOURCE_DIR}/cmake/create_cmake_config_files.cmake)
 
-include(cmake/enable_doxygen_documentation.cmake)
+#include(cmake/enable_doxygen_documentation.cmake)
 
 include(cmake/enable_code_style_check.cmake)
 
diff --git a/cmake/config.cmake.in b/cmake/config.cmake.in
new file mode 100644
index 00000000..269971d3
--- /dev/null
+++ b/cmake/config.cmake.in
@@ -0,0 +1,4 @@
+@PACKAGE_INIT@
+
+include(${CMAKE_CURRENT_LIST_DIR}/chimeratk-deviceaccess-targets.cmake)
+check_required_components(chimeratk-deviceaccess)
\ No newline at end of file
